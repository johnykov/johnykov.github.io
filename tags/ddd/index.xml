<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DDD on johny&#39;s blog</title>
    <link>https://johnykov.github.io/tags/ddd/</link>
    <description>Recent content in DDD on johny&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/mgjohansen/hucore.git&#34; target=&#34;_blank&#34;&gt;[Hu]Core theme&lt;/a&gt; &amp; &lt;a href=&#34;http://gohugo.io&#34; target=&#34;_blank&#34;&gt;Hugo&lt;/a&gt; â™¥</copyright>
    <lastBuildDate>Sat, 06 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://johnykov.github.io/tags/ddd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rails ActiveRecord or DDD?</title>
      <link>https://johnykov.github.io/DDD-rails.html</link>
      <pubDate>Sat, 06 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://johnykov.github.io/DDD-rails.html</guid>
      <description>Picking the right Rails code style Yesterday I&amp;rsquo;ve seen this amazing 8 years old video October CincyRb - Jim Weirich on Decoupling from Rails. The mentioned video presents interesting way of separating App Code - business domain core logic - from infrastructure, Rails (ActiveRecord) specific code. As I understand this is called DDD - Domain Driven Design. There are multiple books about this concept. Just google them if interested. Going against the main flow - with DDD Rails concept - requires a lot of discipline and patience to learn, teach and adapt the whole team to stick to it.</description>
    </item>
    
  </channel>
</rss>
